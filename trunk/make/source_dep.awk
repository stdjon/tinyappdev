#!/usr/bin/awk -f

# usage:
#   prog src_file dep_file obj_file [opts], where src_file is a .c or .cpp file.

# options:
#   -I   add search path for include files (like compiler option).
#   -G   set a path for autogenerated include files. make will try to build these files.

# This script scans the #include statements in the specified file, then scans
# all included files for further includes until no further includes can be found.
# only #include "xxx" directives are followed; #include <xxx> are ignored.

# The output is in make dependency format to the file specified by 'dep_file':
#   obj_file dep_file: src_file <discovered headers...>

function error(msg) {
	print FILENAME ":" FNR ": " msg
	fail = 1
	exit 1
}


function printvrb(msg) {
	if(verbose) { print "..." msg }
}


function file_exists(path) {
#	return 0 == system("test -f " path) #this test is slower but may be more portable?
	return (getline _xxx_ < path) >= 0
}


BEGIN {
	verbose = 0
	fail = 0
	src_file = ARGV[1]
	dep_file = ARGV[2]; ARGV[2] = ""
	obj_file = ARGV[3]; ARGV[3] = ""
	
	for(i = 1; i < ARGC; i++)
	{
		if("-I" == ARGV[i])
		{
			#add header search path
			search_path[search_path_count++] = ARGV[i + 1]
			ARGV[i++] = ""
			ARGV[i] = ""
		}
		if("-G" == ARGV[i])
		{
			#set autogen path
			gen_path = ARGV[i + 1]
			ARGV[i++] = ""
			ARGV[i] = ""
		}
		if("-V" == ARGV[i])
		{
			verbose = 1
			ARGV[i++] = ""
		}
	}
	
	print "[SRC] Calculating dependencies for '" src_file "'"
}


(1 == FNR) {
	printvrb("scanning '"FILENAME"'")
}


/^[ \t]*#[ \t]*include[ \t]*"/ {
	found = 0
	autogen = 0
	
	split(FILENAME, arr, "/"); outdir = arr[1]
	if("obj" == outdir)
	{
		# asssume that autogen files can reference other autogenerated files
		# without needing an explicit comment
		autogen = 1
	}
	
	# find filename
	split($0, arr, "\""); file = arr[2]
	
	if(0 == autogen)
	{
		# look for a comment after the include file containing the word 'autogen'
		# (case-insensitive match).
		split($0, arr, "//"); comment = arr[2] # C++-style // comment
		if("" == comment)
		{
			split($0, arr, "/\\*"); comment = arr[2] # C style /*...*/
		}
		autogen = match(tolower(comment), /autogen/)
	}
	
	for(i in search_path)
	{
		newfile = search_path[i] "/" file
		
		if(!(newfile in file_arr))
		{
			# Test if the file actually exists.
			
			if(file_exists(newfile))
			{
				file_arr[newfile] = 1
				
				#add to list of files to scan
				printvrb("adding '" newfile "' to scan list")
				ARGV[ARGC++] = newfile
				close(newfile)
				found = 1
				break
			}
		}
		else
		{
			found = 1 # we've already found this file
		}
	}
	
	if(!found)
	{
		# To support autogenerated headers, they should be added to the dependency
		# list, but don't actually try to scan them, unless they already exist.
		# (make is smart enough to run this script again to regenerate the
		# dependency files during the build process as new files become available.)
		# As we didn't find the file, we have to assume it will end up in gen_path
		
		if(autogen)
		{
			genfile = gen_path "/" file
			file_arr[genfile] = 1
			if(file_exists(genfile))
			{
				# scan this if it exists
				printvrb("adding '" genfile "' to scan list")
				ARGV[ARGC++] = genfile
				close(genfile)
			}
		}
		else
		{
			error(file " was not found and is not tagged as autogenerated.\n")
		}
	}
}


END {
	if(!fail)
	{
		printvrb("generating '" dep_file "'")
		print "# Autogenerated dependencies for " src_file > dep_file
		print obj_file " \\\n" dep_file ": \\\n\t" src_file "  \\" > dep_file
		for(file in file_arr)
		{
			print "\t" file " \\" > dep_file
		}
		
		print "# End of dependencies (" dep_file ")" > dep_file
	}
}
